# This demo will start a DaemonSet of docker.io/traefik/whoami:v1.8
# and listen to port 80 and will index all whoami pods as /nodename/
---
# a simple whoami DaemonSet
# traefik/whoami respond to some basic url
# see https://hub.docker.com/r/traefik/whoami for details
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: whoami-ds
  labels:
    app: whoami-app
spec:
  selector:
    matchLabels:
      app: whoami-app
  template:
    metadata:
      labels:
        app: whoami-app
    spec:
      containers:
        - image: docker.io/traefik/whoami:v1.8
          name: whoami
          resources:
            limits:
              memory: 32Mi
              cpu: '0.1'
          ports:
            - containerPort: 80
---
# Middleware to drop 1 level prefix
# optional Section, once add traefik will drop one path level of all path
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: strip-prefix
  annotations:
    kubernetes.io/ingress.class: traefik
spec:
  replacePathRegex:
    regex: ^/(?:[^/]+)/?(.*)
    replacement: /$1
---
# The Dynamique ingress bootstrap, this Ingress will reved new routes to new services connected to selectec pods
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: whoami-ingress
  annotations:
    kubernetes.io/ingress.class: traefik
    ingress.kubernetes.io/ssl-redirect: 'false'
    # traefik.ingress.kubernetes.io/router.middlewares: default-strip-prefix@kubernetescrd
spec:
  rules:
    # - host: 'your DNS'
    - http:
        paths:
          - path: /fake-url
            pathType: Exact
            backend:
              service:
                name: fake-service
                port:
                  number: 80
---
# Create a service account for dyn-ingress got give it access to kubectrl
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dyn-ingress-account
---
# Role with all APIs used by the Dyn-Ingress script
# watching pods, services and ingresses for live update
# creating per pod services
# patching pods to add labels
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default
  name: dyn-ingress-account
rules:
  - apiGroups: [''] # "" indicates the core API group
    resources: ['pods']
    verbs: ['get', 'watch', 'list', 'patch']
  - apiGroups: [''] # "" indicates the core API group
    resources: ['services']
    verbs: ['get', 'watch', 'list', 'create', 'delete', 'update']
  - apiGroups: ['networking.k8s.io'] # "" indicates the core API group
    resources: ['ingresses']
    verbs: ['get', 'watch', 'list', 'update']
---
# The Role binding for dyn-ingress-account => dyn-ingress Deployment
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: dyn-ingress-account
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: dyn-ingress-account
subjects:
  - kind: ServiceAccount
    name: dyn-ingress-account
---
# Dyn-ingress Deployment, dynamically manage ingresses and services
# need some more works to improve HA mode, should works fine with replicas > 1
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dyn-ingress
  labels:
    app: dyn-ingress
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dyn-ingress
  template:
    metadata:
      labels:
        app: dyn-ingress
    spec:
      serviceAccountName: dyn-ingress-account
      #tolerations:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: node-role.kubernetes.io/master
                    operator: In
                    values:
                      - 'true'
      containers:
        - name: dyn-ingress
          image: urielch/dyn-ingress:latest
          #image: urielch/dyn-ingress:2022-11-02_091059
          imagePullPolicy: Always
          resources:
            limits:
              memory: 128Mi
              cpu: '0.2'
          ports:
            - containerPort: 80
          env:
            - name: SELF_SELECTOR
              value: 'app=dyn-ingress'
            - name: LABEL.all
              value: '1'
            - name: LABEL.nodename
              value: 'nodename'
            - name: INGRESS.default.whoami-ingress.host
              value: ''
            - name: INGRESS.default.whoami-ingress.1.name
              value: 'whoami-ds'
            - name: INGRESS.default.whoami-ingress.1.selector
              value: 'app=whoami-app'
            - name: INGRESS.default.whoami-ingress.1.prefix
              value: '/NODENAME'
            - name: INGRESS.default.whoami-ingress.1.port
              value: '80'
            - name: INGRESS.default.whoami-ingress.1.targetPort
              value: '80'
            - name: HTTP_PORT
              value: '80'
